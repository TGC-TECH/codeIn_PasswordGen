{"version": 2, "width": 120, "height": 30, "timestamp": 1576803670, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.369775, "o", "\u001b]0;toby@DESKTOP-I5I49PH: ~\u0007\u001b[01;32mtoby@DESKTOP-I5I49PH\u001b[00m:\u001b[01;34m~\u001b[00m$ "]
[3.080626, "o", "c"]
[3.257159, "o", "a"]
[3.456088, "o", "t"]
[3.529274, "o", " "]
[3.988481, "o", "M"]
[4.089416, "o", "a"]
[4.214327, "o", "i"]
[4.328823, "o", "n"]
[4.988231, "o", "."]
[5.277508, "o", "j"]
[5.395403, "o", "a"]
[5.576233, "o", "v"]
[5.740618, "o", "a"]
[5.870697, "o", "\r\n"]
[5.891956, "o", "import java.util.Scanner;\r\nimport java.util.ArrayList;\r\n\r\n\r\n\r\n\r\nclass Main {\r\n      public static String[] info = new String[8];\r\n      public static ArrayList<String> results = new ArrayList<String>();\r\n\r\n\r\n  public static void main(String[] args) {\r\n     Scanner scan = new Scanner(System.in);  // Create a Scanner object\r\n         System.out.println(\"Enter EVERYTHING all LOWERCASE we will deal with caps ;)\");\r\n\r\n    System.out.println(\"Enter First Name\");\r\n    info[0] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Last Name\");\r\n    info[1] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Pet Name (if none hit enter)\");\r\n    info[2] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Street Name\");\r\n    info[3] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Zip Code\");\r\n    info[4] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Birth Month\");\r\n    info[5] = scan.nextLine();  // Read user input\r\n   "]
[5.892747, "o", "  System.out.println(\"Enter Birth Day\");\r\n    info[6] = scan.nextLine();  // Read user input\r\n     System.out.println(\"Enter Birth Year\");\r\n    info[7] = scan.nextLine();  // Read user input\r\n\r\n    genbase(); \r\n    replace();\r\n    prefix();\r\n    suffix();\r\n    caps();\r\n\r\n    System.out.println(results);\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  public static void genbase(){\r\n    for(int x = 0; x < info.length; x++){\r\n      results.add(info[x]);\r\n    }\r\n  }\r\n\r\n\r\n  //Stack overflow stuff (it does the cap permutations because my code would be way longer...)\r\n  static void newFunction(String str){\r\n    int numOfCombos = 1 << str.length();  \r\n    for (int i = 0; i < numOfCombos; i++) {\r\n      char[] combinations = str.toCharArray();\r\n      for (int j = 0; j < str.length(); j++) {\r\n          if (((i >> j) & 1) == 1 ) {\r\n              combinations[j] = Character.toUpperCase(str.charAt(j));\r\n          }\r\n      }\r\n      results.add(new String(combinations));\r\n    }\r\n  }\r\n\r\n//method to call the stack overflow stuff\r\n  public static void cap"]
[5.896761, "o", "s(){\r\n    for(int x = 0; x < info.length; x++) newFunction(info[x]);\r\n  }\r\n\r\n  public static void replace(){\r\n    for(int x = 8; x < info.length+8; x++){\r\n      String temp = \"\";\r\n      for(int y = 0; y < info[x-8].length(); y++){\r\n        if(info[x-8].substring(y, y+1).equals(\"s\")) temp = temp + \"$\";\r\n        else if(info[x-8].substring(y, y+1).equals(\"a\")) temp = temp + \"4\";\r\n        else if(info[x-8].substring(y, y+1).equals(\"e\")) temp = temp + \"3\";\r\n        else if(info[x-8].substring(y, y+1).equals(\"o\")) temp = temp + \"0\"; \r\n        else if(info[x-8].substring(y, y+1).equals(\"l\")) temp = temp + \"1\"; \r\n        else temp = temp + info[x-8].substring(y, y+1);\r\n      }\r\n              results.add(temp);\r\n\r\n      \r\n    }\r\n  }\r\n\r\n  public static void prefix(){\r\n    /*123\r\n    12345\r\n    1\r\n    birthday month, year, date\r\n    zipcode*/\r\n    int temp = results.size();\r\n    for(int i = 0; i < temp; i++){\r\n      results.add(\"123\" + results.get(i));\r\n      results.add(\"12345\" + results.get(i));\r\n      results.add(\"1"]
[5.897901, "o", "\" + results.get(i));\r\n      results.add(results.get(4) + results.get(i));\r\n      results.add(results.get(5) + results.get(i));\r\n      results.add(results.get(6) + results.get(i));\r\n      results.add(results.get(7) + results.get(i));\r\n    }\r\n  }\r\n\r\n  public static void suffix(){\r\n   /*!\r\n   01\r\n   1\r\n   birthday\r\n   lastname\r\n   first letter of lastname\r\n   zipcode*/\r\n int temp = results.size();\r\n    for(int i = 0; i < temp; i++){\r\n      results.add(results.get(i) + \"01\");\r\n      results.add(results.get(i) + \"!\");\r\n      results.add(results.get(i) + \"1\");\r\n      results.add(results.get(i) + results.get(1));\r\n      results.add(results.get(i) + results.get(1).substring(0, 1));\r\n\r\n      results.add(results.get(i) + results.get(4));\r\n      results.add(results.get(i) + results.get(5));\r\n      results.add(results.get(i) + results.get(6));\r\n      results.add(results.get(i) + results.get(7));\r\n    }\r\n   \r\n\r\n  }\r\n\r\n  public static void println(){\r\n\r\n  }\r\n}\r\n\u001b]0;toby@DESKTOP-I5I49PH: ~\u0007\u001b[01;32mtoby@DESKTOP-I5I49PH\u001b[00m:"]
[5.89894, "o", "\u001b[01;34m~\u001b[00m$ "]
[13.839539, "o", "j"]
[13.91656, "o", "a"]
[14.072361, "o", "v"]
[14.225766, "o", "a"]
[14.342206, "o", " "]
[14.655653, "o", "M"]
[14.780189, "o", "a"]
[14.897554, "o", "i"]
[15.039933, "o", "n"]
[15.594433, "o", "."]
[15.896538, "o", "j"]
[16.002934, "o", "a"]
[16.206614, "o", "v"]
[16.345716, "o", "a"]
[16.475224, "o", "\r\n"]
[18.600945, "o", "Enter EVERYTHING all LOWERCASE we will deal with caps ;)\r\nEnter First Name\r\n"]
[20.570971, "o", "j"]
[20.637336, "o", "a"]
[20.783247, "o", "c"]
[20.869522, "o", "k"]
[21.339927, "o", "\r\n"]
[21.340999, "o", "Enter Last Name"]
[21.341286, "o", "\r\n"]
[23.830425, "o", "d"]
[23.978028, "o", "o"]
[24.058832, "o", "e"]
[24.201833, "o", "\r\n"]
[24.202262, "o", "Enter Pet Name (if none hit enter)\r\n"]
[28.38131, "o", "m"]
[28.468453, "o", "a"]
[28.798247, "o", "x"]
[29.010359, "o", "\r\n"]
[29.010845, "o", "Enter Street Name\r\n"]
[35.209248, "o", "p"]
[35.901678, "o", "\b \b"]
[36.170831, "o", "m"]
[36.324055, "o", "a"]
[36.428791, "o", "i"]
[36.571454, "o", "n"]
[37.575912, "o", "\r\n"]
[37.576797, "o", "Enter Zip Code\r\n"]
[42.46897, "o", "0"]
[43.608793, "o", "2"]
[44.395647, "o", "\b \b"]
[44.634, "o", "1"]
[44.960467, "o", "2"]
[52.343647, "o", "4"]
[52.815446, "o", "5"]
[53.344378, "o", "\r\n"]
[53.344886, "o", "Enter Birth Month\r\n"]
[55.425503, "o", "1"]
[55.652859, "o", "\r\n"]
[55.653288, "o", "Enter Birth Day\r\n"]
[58.021188, "o", "1"]
[58.267709, "o", "0"]
[58.729844, "o", "\r\n"]
[58.730188, "o", "Enter Birth Year"]
[58.731243, "o", "\r\n"]
[60.33994, "o", "2"]
[60.469153, "o", "0"]
[60.632663, "o", "0"]
[60.89822, "o", "2"]
[61.225489, "o", "\r\n"]
[61.360271, "o", "[jack, doe, max, main, 01245, 1, 10, 2002, j4ck, d03, m4x, m4in, 01245, 1, 10, 2002, 123jack, 12345jack, 1jack, 01245jack, 1jack, 10jack, 2002jack, 123doe, 12345doe, 1doe, 01245doe, 1doe, 10doe, 2002doe, 123max, 12345max, 1max, 01245max, 1max, 10max, 2002max, 123main, 12345main, 1main, 01245main, 1main, 10main, 2002main, 12301245, 1234501245, 101245, 0124501245, 101245, 1001245, 200201245, 1231, 123451, 11, 012451, 11, 101, 20021, 12310, 1234510, 110, 0124510, 110, 1010, 200210, 1232002, 123452002, 12002, 012452002, 12002, 102002, 20022002, 123j4ck, 12345j4ck, 1j4ck, 01245j4ck, 1j4ck, 10j4ck, 2002j4ck, 123d03, 12345d03, 1d03, 01245d03, 1d03, 10d03, 2002d03, 123m4x, 12345m4x, 1m4x, 01245m4x, 1m4x, 10m4x, 2002m4x, 123m4in, 12345m4in, 1m4in, 01245m4in, 1m4in, 10m4in, 2002m4in, 12301245, 1234501245, 101245, 0124501245, 101245, 1001245, 200201245, 1231, 123451, 11, 012451, 11, 101, 20021, 12310, 1234510, 110, 0124510, 110, 1010, 200210, 1232002, 123452002, 12002, 012452002, 12002, 102002, 20022002, jack01, jack!, "]
[61.362607, "o", "jack1, jackdoe, jackd, jack01245, jack1, jack10, jack2002, doe01, doe!, doe1, doedoe, doed, doe01245, doe1, doe10, doe2002, max01, max!, max1, maxdoe, maxd, max01245, max1, max10, max2002, main01, main!, main1, maindoe, maind, main01245, main1, main10, main2002, 0124501, 01245!, 012451, 01245doe, 01245d, 0124501245, 012451, 0124510, 012452002, 101, 1!, 11, 1doe, 1d, 101245, 11, 110, 12002, 1001, 10!, 101, 10doe, 10d, 1001245, 101, 1010, 102002, 200201, 2002!, 20021, 2002doe, 2002d, 200201245, 20021, 200210, 20022002, j4ck01, j4ck!, j4ck1, j4ckdoe, j4ckd, j4ck01245, j4ck1, j4ck10, j4ck2002, d0301, d03!, d031, d03doe, d03d, d0301245, d031, d0310, d032002, m4x01, m4x!, m4x1, m4xdoe, m4xd, m4x01245, m4x1, m4x10, m4x2002, m4in01, m4in!, m4in1, m4indoe, m4ind, m4in01245, m4in1, m4in10, m4in2002, 0124501, 01245!, 012451, 01245doe, 01245d, 0124501245, 012451, 0124510, 012452002, 101, 1!, 11, 1doe, 1d, 101245, 11, 110, 12002, 1001, 10!, 101, 10doe, 10d, 1001245, 101, 1010, 102002, 200201, 2002!, 20021, 2002doe, 2002d,"]
[61.365305, "o", " 200201245, 20021, 200210, 20022002, 123jack01, 123jack!, 123jack1, 123jackdoe, 123jackd, 123jack01245, 123jack1, 123jack10, 123jack2002, 12345jack01, 12345jack!, 12345jack1, 12345jackdoe, 12345jackd, 12345jack01245, 12345jack1, 12345jack10, 12345jack2002, 1jack01, 1jack!, 1jack1, 1jackdoe, 1jackd, 1jack01245, 1jack1, 1jack10, 1jack2002, 01245jack01, 01245jack!, 01245jack1, 01245jackdoe, 01245jackd, 01245jack01245, 01245jack1, 01245jack10, 01245jack2002, 1jack01, 1jack!, 1jack1, 1jackdoe, 1jackd, 1jack01245, 1jack1, 1jack10, 1jack2002, 10jack01, 10jack!, 10jack1, 10jackdoe, 10jackd, 10jack01245, 10jack1, 10jack10, 10jack2002, 2002jack01, 2002jack!, 2002jack1, 2002jackdoe, 2002jackd, 2002jack01245, 2002jack1, 2002jack10, 2002jack2002, 123doe01, 123doe!, 123doe1, 123doedoe, 123doed, 123doe01245, 123doe1, 123doe10, 123doe2002, 12345doe01, 12345doe!, 12345doe1, 12345doedoe, 12345doed, 12345doe01245, 12345doe1, 12345doe10, 12345doe2002, 1doe01, 1doe!, 1doe1, 1doedoe, 1doed, 1doe01245, 1doe1, 1doe10, 1doe2002, 0124"]
[61.366674, "o", "5doe01, 01245doe!, 01245doe1, 01245doedoe, 01245doed, 01245doe01245, 01245doe1, 01245doe10, 01245doe2002, 1doe01, 1doe!, 1doe1, 1doedoe, 1doed, 1doe01245, 1doe1, 1doe10, 1doe2002, 10doe01, 10doe!, 10doe1, 10doedoe, 10doed, 10doe01245, 10doe1, 10doe10, 10doe2002, 2002doe01, 2002doe!, 2002doe1, 2002doedoe, 2002doed, 2002doe01245, 2002doe1, 2002doe10, 2002doe2002, 123max01, 123max!, 123max1, 123maxdoe, 123maxd, 123max01245, 123max1, 123max10, 123max2002, 12345max01, 12345max!, 12345max1, 12345maxdoe, 12345maxd, 12345max01245, 12345max1, 12345max10, 12345max2002, 1max01, 1max!, 1max1, 1maxdoe, 1maxd, 1max01245, 1max1, 1max10, 1max2002, 01245max01, 01245max!, 01245max1, 01245maxdoe, 01245maxd, 01245max01245, 01245max1, 01245max10, 01245max2002, 1max01, 1max!, 1max1, 1maxdoe, 1maxd, 1max01245, 1max1, 1max10, 1max2002, 10max01, 10max!, 10max1, 10maxdoe, 10maxd, 10max01245, 10max1, 10max10, 10max2002, 2002max01, 2002max!, 2002max1, 2002maxdoe, 2002maxd, 2002max01245, 2002max1, 2002max10, 2002max2002, 123main01, 123ma"]
[61.368058, "o", "in!, 123main1, 123maindoe, 123maind, 123main01245, 123main1, 123main10, 123main2002, 12345main01, 12345main!, 12345main1, 12345maindoe, 12345maind, 12345main01245, 12345main1, 12345main10, 12345main2002, 1main01, 1main!, 1main1, 1maindoe, 1maind, 1main01245, 1main1, 1main10, 1main2002, 01245main01, 01245main!, 01245main1, 01245maindoe, 01245maind, 01245main01245, 01245main1, 01245main10, 01245main2002, 1main01, 1main!, 1main1, 1maindoe, 1maind, 1main01245, 1main1, 1main10, 1main2002, 10main01, 10main!, 10main1, 10maindoe, 10maind, 10main01245, 10main1, 10main10, 10main2002, 2002main01, 2002main!, 2002main1, 2002maindoe, 2002maind, 2002main01245, 2002main1, 2002main10, 2002main2002, 1230124501, 12301245!, 123012451, 12301245doe, 12301245d, 1230124501245, 123012451, 1230124510, 123012452002, 123450124501, 1234501245!, 12345012451, 1234501245doe, 1234501245d, 123450124501245, 12345012451, 123450124510, 12345012452002, 10124501, 101245!, 1012451, 101245doe, 101245d, 10124501245, 1012451, 10124510, 1012452002, 012"]
[61.369589, "o", "450124501, 0124501245!, 01245012451, 0124501245doe, 0124501245d, 012450124501245, 01245012451, 012450124510, 01245012452002, 10124501, 101245!, 1012451, 101245doe, 101245d, 10124501245, 1012451, 10124510, 1012452002, 100124501, 1001245!, 10012451, 1001245doe, 1001245d, 100124501245, 10012451, 100124510, 10012452002, 20020124501, 200201245!, 2002012451, 200201245doe, 200201245d, 20020124501245, 2002012451, 20020124510, 2002012452002, 123101, 1231!, 12311, 1231doe, 1231d, 123101245, 12311, 123110, 12312002, 12345101, 123451!, 1234511, 123451doe, 123451d, 12345101245, 1234511, 12345110, 1234512002, 1101, 11!, 111, 11doe, 11d, 1101245, 111, 1110, 112002, 01245101, 012451!, 0124511, 012451doe, 012451d, 01245101245, 0124511, 01245110, 0124512002, 1101, 11!, 111, 11doe, 11d, 1101245, 111, 1110, 112002, 10101, 101!, 1011, 101doe, 101d, 10101245, 1011, 10110, 1012002, 2002101, 20021!, 200211, 20021doe, 20021d, 2002101245, 200211, 2002110, 200212002, 1231001, 12310!, 123101, 12310doe, 12310d, 1231001245, 123101, 123101"]
[61.372502, "o", "0, 123102002, 123451001, 1234510!, 12345101, 1234510doe, 1234510d, 123451001245, 12345101, 123451010, 12345102002, 11001, 110!, 1101, 110doe, 110d, 11001245, 1101, 11010, 1102002, 012451001, 0124510!, 01245101, 0124510doe, 0124510d, 012451001245, 01245101, 012451010, 01245102002, 11001, 110!, 1101, 110doe, 110d, 11001245, 1101, 11010, 1102002, 101001, 1010!, 10101, 1010doe, 1010d, 101001245, 10101, 101010, 10102002, 20021001, 200210!, 2002101, 200210doe, 200210d, 20021001245, 2002101, 20021010, 2002102002, 123200201, 1232002!, 12320021, 1232002doe, 1232002d, 123200201245, 12320021, 123200210, 12320022002, 12345200201, 123452002!, 1234520021, 123452002doe, 123452002d, 12345200201245, 1234520021, 12345200210, 1234520022002, 1200201, 12002!, 120021, 12002doe, 12002d, 1200201245, 120021, 1200210, 120022002, 01245200201, 012452002!, 0124520021, 012452002doe, 012452002d, 01245200201245, 0124520021, 01245200210, 0124520022002, 1200201, 12002!, 120021, 12002doe, 12002d, 1200201245, 120021, 1200210, 120022002, 1020020"]
[61.380799, "o", "1, 102002!, 1020021, 102002doe, 102002d, 10200201245, 1020021, 10200210, 1020022002, 2002200201, 20022002!, 200220021, 20022002doe, 20022002d, 2002200201245, 200220021, 2002200210, 200220022002, 123j4ck01, 123j4ck!, 123j4ck1, 123j4ckdoe, 123j4ckd, 123j4ck01245, 123j4ck1, 123j4ck10, 123j4ck2002, 12345j4ck01, 12345j4ck!, 12345j4ck1, 12345j4ckdoe, 12345j4ckd, 12345j4ck01245, 12345j4ck1, 12345j4ck10, 12345j4ck2002, 1j4ck01, 1j4ck!, 1j4ck1, 1j4ckdoe, 1j4ckd, 1j4ck01245, 1j4ck1, 1j4ck10, 1j4ck2002, 01245j4ck01, 01245j4ck!, 01245j4ck1, 01245j4ckdoe, 01245j4ckd, 01245j4ck01245, 01245j4ck1, 01245j4ck10, 01245j4ck2002, 1j4ck01, 1j4ck!, 1j4ck1, 1j4ckdoe, 1j4ckd, 1j4ck01245, 1j4ck1, 1j4ck10, 1j4ck2002, 10j4ck01, 10j4ck!, 10j4ck1, 10j4ckdoe, 10j4ckd, 10j4ck01245, 10j4ck1, 10j4ck10, 10j4ck2002, 2002j4ck01, 2002j4ck!, 2002j4ck1, 2002j4ckdoe, 2002j4ckd, 2002j4ck01245, 2002j4ck1, 2002j4ck10, 2002j4ck2002, 123d0301, 123d03!, 123d031, 123d03doe, 123d03d, 123d0301245, 123d031, 123d0310, 123d032002, 12345d0301, 12345d03!, 12345d0"]
[61.382767, "o", "31, 12345d03doe, 12345d03d, 12345d0301245, 12345d031, 12345d0310, 12345d032002, 1d0301, 1d03!, 1d031, 1d03doe, 1d03d, 1d0301245, 1d031, 1d0310, 1d032002, 01245d0301, 01245d03!, 01245d031, 01245d03doe, 01245d03d, 01245d0301245, 01245d031, 01245d0310, 01245d032002, 1d0301, 1d03!, 1d031, 1d03doe, 1d03d, 1d0301245, 1d031, 1d0310, 1d032002, 10d0301, 10d03!, 10d031, 10d03doe, 10d03d, 10d0301245, 10d031, 10d0310, 10d032002, 2002d0301, 2002d03!, 2002d031, 2002d03doe, 2002d03d, 2002d0301245, 2002d031, 2002d0310, 2002d032002, 123m4x01, 123m4x!, 123m4x1, 123m4xdoe, 123m4xd, 123m4x01245, 123m4x1, 123m4x10, 123m4x2002, 12345m4x01, 12345m4x!, 12345m4x1, 12345m4xdoe, 12345m4xd, 12345m4x01245, 12345m4x1, 12345m4x10, 12345m4x2002, 1m4x01, 1m4x!, 1m4x1, 1m4xdoe, 1m4xd, 1m4x01245, 1m4x1, 1m4x10, 1m4x2002, 01245m4x01, 01245m4x!, 01245m4x1, 01245m4xdoe, 01245m4xd, 01245m4x01245, 01245m4x1, 01245m4x10, 01245m4x2002, 1m4x01, 1m4x!, 1m4x1, 1m4xdoe, 1m4xd, 1m4x01245, 1m4x1, 1m4x10, 1m4x2002, 10m4x01, 10m4x!, 10m4x1, 10m4xdoe, 10m4xd,"]
[61.384521, "o", " 10m4x01245, 10m4x1, 10m4x10, 10m4x2002, 2002m4x01, 2002m4x!, 2002m4x1, 2002m4xdoe, 2002m4xd, 2002m4x01245, 2002m4x1, 2002m4x10, 2002m4x2002, 123m4in01, 123m4in!, 123m4in1, 123m4indoe, 123m4ind, 123m4in01245, 123m4in1, 123m4in10, 123m4in2002, 12345m4in01, 12345m4in!, 12345m4in1, 12345m4indoe, 12345m4ind, 12345m4in01245, 12345m4in1, 12345m4in10, 12345m4in2002, 1m4in01, 1m4in!, 1m4in1, 1m4indoe, 1m4ind, 1m4in01245, 1m4in1, 1m4in10, 1m4in2002, 01245m4in01, 01245m4in!, 01245m4in1, 01245m4indoe, 01245m4ind, 01245m4in01245, 01245m4in1, 01245m4in10, 01245m4in2002, 1m4in01, 1m4in!, 1m4in1, 1m4indoe, 1m4ind, 1m4in01245, 1m4in1, 1m4in10, 1m4in2002, 10m4in01, 10m4in!, 10m4in1, 10m4indoe, 10m4ind, 10m4in01245, 10m4in1, 10m4in10, 10m4in2002, 2002m4in01, 2002m4in!, 2002m4in1, 2002m4indoe, 2002m4ind, 2002m4in01245, 2002m4in1, 2002m4in10, 2002m4in2002, 1230124501, 12301245!, 123012451, 12301245doe, 12301245d, 1230124501245, 123012451, 1230124510, 123012452002, 123450124501, 1234501245!, 12345012451, 1234501245doe, 1234501245"]
[61.386016, "o", "d, 123450124501245, 12345012451, 123450124510, 12345012452002, 10124501, 101245!, 1012451, 101245doe, 101245d, 10124501245, 1012451, 10124510, 1012452002, 012450124501, 0124501245!, 01245012451, 0124501245doe, 0124501245d, 012450124501245, 01245012451, 012450124510, 01245012452002, 10124501, 101245!, 1012451, 101245doe, 101245d, 10124501245, 1012451, 10124510, 1012452002, 100124501, 1001245!, 10012451, 1001245doe, 1001245d, 100124501245, 10012451, 100124510, 10012452002, 20020124501, 200201245!, 2002012451, 200201245doe, 200201245d, 20020124501245, 2002012451, 20020124510, 2002012452002, 123101, 1231!, 12311, 1231doe, 1231d, 123101245, 12311, 123110, 12312002, 12345101, 123451!, 1234511, 123451doe, 123451d, 12345101245, 1234511, 12345110, 1234512002, 1101, 11!, 111, 11doe, 11d, 1101245, 111, 1110, 112002, 01245101, 012451!, 0124511, 012451doe, 012451d, 01245101245, 0124511, 01245110, 0124512002, 1101, 11!, 111, 11doe, 11d, 1101245, 111, 1110, 112002, 10101, 101!, 1011, 101doe, 101d, 10101245, 1011, 10110, 101"]
[61.389118, "o", "2002, 2002101, 20021!, 200211, 20021doe, 20021d, 2002101245, 200211, 2002110, 200212002, 1231001, 12310!, 123101, 12310doe, 12310d, 1231001245, 123101, 1231010, 123102002, 123451001, 1234510!, 12345101, 1234510doe, 1234510d, 123451001245, 12345101, 123451010, 12345102002, 11001, 110!, 1101, 110doe, 110d, 11001245, 1101, 11010, 1102002, 012451001, 0124510!, 01245101, 0124510doe, 0124510d, 012451001245, 01245101, 012451010, 01245102002, 11001, 110!, 1101, 110doe, 110d, 11001245, 1101, 11010, 1102002, 101001, 1010!, 10101, 1010doe, 1010d, 101001245, 10101, 101010, 10102002, 20021001, 200210!, 2002101, 200210doe, 200210d, 20021001245, 2002101, 20021010, 2002102002, 123200201, 1232002!, 12320021, 1232002doe, 1232002d, 123200201245, 12320021, 123200210, 12320022002, 12345200201, 123452002!, 1234520021, 123452002doe, 123452002d, 12345200201245, 1234520021, 12345200210, 1234520022002, 1200201, 12002!, 120021, 12002doe, 12002d, 1200201245, 120021, 1200210, 120022002, 01245200201, 012452002!, 0124520021, 012452002doe, "]
[61.396196, "o", "012452002d, 01245200201245, 0124520021, 01245200210, 0124520022002, 1200201, 12002!, 120021, 12002doe, 12002d, 1200201245, 120021, 1200210, 120022002, 10200201, 102002!, 1020021, 102002doe, 102002d, 10200201245, 1020021, 10200210, 1020022002, 2002200201, 20022002!, 200220021, 20022002doe, 20022002d, 2002200201245, 200220021, 2002200210, 200220022002, jack, Jack, jAck, JAck, jaCk, JaCk, jACk, JACk, jacK, JacK, jAcK, JAcK, jaCK, JaCK, jACK, JACK, doe, Doe, dOe, DOe, doE, DoE, dOE, DOE, max, Max, mAx, MAx, maX, MaX, mAX, MAX, main, Main, mAin, MAin, maIn, MaIn, mAIn, MAIn, maiN, MaiN, mAiN, MAiN, maIN, MaIN, mAIN, MAIN, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 01245, 1, 1, 10, 10, 10, 10, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002]\r\n"]
[61.412199, "o", "\u001b]0;toby@DESKTOP-I5I49PH: ~\u0007\u001b[01;32mtoby@DESKTOP-I5I49PH\u001b[00m:\u001b[01;34m~\u001b[00m$ "]
[83.345214, "o", "exit\r\n"]
